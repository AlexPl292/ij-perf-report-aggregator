package degradation_detector

import (
  "github.com/stretchr/testify/assert"
  "testing"
)

func TestChangeDetector(t *testing.T) {
  data := []int{5691, 5855, 5720, 6339, 5829, 5496, 5427, 5586, 5859, 5603, 5868, 5761, 5440, 5590, 5870, 5781, 5632, 6092, 5636, 5849, 5730, 5639, 5678, 5857, 5655, 5486, 5877, 5639, 5668, 5864, 5602, 5855, 6049, 5741, 5794, 5822, 5704, 5707, 6167, 5923, 5765, 5648, 5775, 5578, 5541, 5919, 5498, 5436, 5857, 5508, 5739, 5820, 5662, 5582, 5565, 5708, 5587, 5813, 5618, 5796, 5682, 5778, 5848, 6034, 5847, 5653, 5783, 6006, 5647, 5509, 5869, 5738, 5709, 5762, 5793, 5607, 5620, 5580, 5710, 5641, 5673, 5794, 5937, 5708, 5705, 5747, 5679, 5963, 6240, 5958, 5915, 5737, 6000, 5747, 5529, 5562, 5909, 5713, 5680, 5729, 5656, 5820, 5670, 5884, 5686, 5662, 5848, 5710, 5707, 5821, 5564, 6029, 6045, 5765, 5727, 5653, 5766, 5784, 5893, 5755, 5756, 5836, 5652, 5971, 6000, 5689, 6110, 5953, 6102, 5747, 5872, 5808, 5891, 5839, 5719, 5865, 6114, 5811, 5687, 5834, 5759, 5873, 6114, 6314, 5757, 5849, 5901, 5993, 5226, 5338, 5356, 5299, 5426, 5479, 5687, 5594, 5497, 5735, 19094, 19217, 19264, 18976, 19040, 19348, 19092, 5777, 5810, 5636, 5600, 5681, 5528, 5573, 5494, 5613, 5603, 5509, 5455, 5552, 5773, 5903, 5385}
  indexes := GetChangePointIndexes(data, 1)
  assert.Equal(t, []int{111, 148, 153, 158, 165}, indexes)
}

func TestWithoutDegradations(t *testing.T) {
  data := []int{99, 85, 68, 70, 67, 82, 87, 68, 93, 72, 85, 86, 84, 71, 95, 67, 85, 97, 86, 87, 85, 97, 99, 101, 75, 86, 107, 87, 97, 120, 75, 80, 70, 78, 75, 92, 97, 98, 98, 115, 85, 110, 120, 85, 70, 80, 105, 104, 74, 78, 100, 109, 98, 107, 74, 72, 69, 66, 86, 76, 66, 75, 84, 85, 93, 74, 95, 98, 71, 70, 74, 98, 109, 75, 120, 72, 86, 72, 73, 80, 102, 85, 86, 74, 75, 74, 98, 100, 110, 85, 90, 105, 95, 113, 71, 98, 111, 76, 69, 106, 97, 78, 67, 86, 109, 88, 94, 111, 86, 71, 72, 85, 74, 66, 84, 86, 67, 67, 75, 90, 78, 101, 67, 75, 81, 87, 74, 84, 95, 89, 96, 74, 74, 71, 114, 98, 87, 87, 107, 111, 86, 71, 75, 74, 88, 83, 86, 62, 77, 98, 74, 77, 87, 76, 90, 110, 78, 112, 113, 100, 101, 86, 102, 85, 69, 67, 74, 87, 98, 98, 94, 71, 72, 73, 85, 85, 99, 97, 96, 72, 94, 85, 110, 75, 69, 89, 73, 85, 90, 108, 76, 73, 94, 105, 103, 86, 96, 67, 102, 95, 112, 69, 89, 96, 71, 69, 89, 84, 74, 88, 87, 78, 110, 97, 72, 64, 99, 98, 110, 118, 74, 77, 109, 73, 74, 102, 71, 88, 87, 99, 98, 73, 101, 105, 85, 69, 69, 95, 73, 79, 89, 73, 101, 71, 86, 100, 86, 69, 71, 66, 71, 84, 100, 66, 71, 96, 71, 96, 101, 87, 86, 85, 65, 99, 81, 95, 98, 98, 75, 70, 72, 73, 74, 71, 84, 73, 95, 85, 106, 70, 71, 67, 69, 85, 74, 84, 108, 100, 95, 84, 67, 85, 86, 88, 71, 91, 71, 101, 70, 69, 68, 76, 73, 72, 86, 87, 73, 86, 73, 96, 87, 71, 88, 70, 95, 67, 98, 75, 72, 72, 95, 95, 68, 76, 84, 96, 73, 95, 97, 95, 63, 85, 100, 70, 110, 85, 100, 73, 97, 99, 100, 94, 83, 93, 85, 72, 102, 76, 70, 96, 107, 82, 78, 74, 98, 113, 71, 85, 87, 70, 101, 74, 98, 72, 98, 98, 73, 87, 102, 88, 86, 99, 70, 86, 75, 86, 74, 67, 111, 72, 96, 99, 75, 75, 70, 70, 71, 95, 70, 86, 92, 109, 96, 91, 88, 70, 97, 69, 74, 64, 103, 97, 84, 71, 97, 102, 80, 76, 112, 76, 99, 69, 74, 69, 90, 77, 86, 107, 96, 68, 99, 89, 89, 85, 73, 88, 85, 84, 75, 82, 95, 68, 98, 90, 94, 85, 86, 84, 85, 73, 94, 97, 95, 74, 85, 73, 107, 99, 72, 70, 75, 88, 87, 85, 98, 97, 84, 91, 71, 70, 75, 88, 97, 70, 95, 77, 66, 76, 109, 74, 84, 69, 81, 76, 87, 72, 97, 101, 109, 85, 98, 84, 97, 75, 112, 108, 73, 96, 73, 84, 84, 73, 86, 70, 69, 71, 73, 85, 67, 101, 97, 91, 74, 75, 97, 82, 73, 73, 85, 97, 61, 70, 72, 85, 88, 71, 67, 85, 65, 68, 68, 98, 84, 73, 87, 71, 80, 77, 90, 100, 71, 120, 69, 85, 87, 82, 85, 96, 128, 86, 71, 69, 102, 85, 85, 110, 71, 74, 73, 88, 72, 94, 97, 85, 74, 67, 111, 73, 96, 84, 94, 94, 66, 66, 75, 75, 74, 74, 94, 94, 74, 74, 69, 69, 73, 73, 86, 86, 66, 66, 95, 95, 73, 73, 88, 88, 97, 97, 86, 86, 86, 86, 88, 88, 68, 68, 69, 69, 86, 86, 85, 85, 73, 73, 73, 73, 103, 103, 99, 99, 97, 97, 72, 72, 83, 83, 70, 70, 98, 98, 96, 96, 106, 106, 85, 85, 108, 108, 114, 114, 86, 86, 96, 96, 77, 77, 97, 97, 102, 102, 89, 89, 107, 107, 99, 99, 101, 101, 96, 96, 113, 113, 112, 112, 98, 98, 83, 83, 72, 72, 74, 74, 96, 96, 84, 84, 91, 91, 97, 97, 73, 73, 88, 88, 83, 83, 97, 97, 114, 114, 84, 84, 75, 75, 89, 89, 75, 75, 94, 94, 87, 87, 86, 86, 101, 101, 96, 96, 138, 138, 104, 104, 121, 121, 71, 71, 99, 99, 72, 72, 72, 72, 87, 87, 95, 95, 73, 73, 71, 71, 82, 82, 74, 74, 88, 88, 106, 106, 74, 74, 85, 85, 74, 74, 85, 85, 86, 86, 88, 88, 103, 103, 99, 99, 91, 91, 101, 101, 100, 100, 85, 85, 73, 73, 83, 83, 95, 95, 71, 71, 73, 73, 75, 75, 87, 87, 74, 74, 77, 77, 102, 102, 91, 91, 81, 81, 79, 79, 99, 99, 79, 79, 94, 94, 76, 76, 78, 78, 84, 84, 81, 81, 90, 90, 93, 93, 95, 95, 79, 79, 81, 81, 85, 85, 87, 87, 87, 87, 85, 85, 83, 83, 81, 81, 88, 88, 88, 88, 75, 75, 88, 88, 84, 84, 74, 74, 74, 113, 74, 84, 75, 99, 85, 97, 85, 73, 92, 72, 86, 86, 109, 83, 101, 68, 73, 73, 86, 68, 101, 108, 79, 96, 93, 97, 71, 93, 88, 94, 78, 95, 83, 82, 93, 92, 86, 101, 81, 81, 81, 148, 81, 77, 92, 81, 94, 83, 91, 93, 89, 82, 97, 83, 95, 87, 77, 106, 94, 90, 84, 98, 93, 97, 97, 92}
  builds := make([]string, len(data))

  times := make([]int64, len(data))
  for i := range times {
    times[i] = int64(i)
  }
  degradations := detectDegradations(data, builds, times, AnalysisSettings{})
  assert.Equal(t, 0, len(degradations))
}
func TestWithoutDegradations2(t *testing.T) {
  data := []int{2940, 2633, 2758, 2648, 2884, 2920, 3205, 2936, 2868, 3212, 2324, 2290, 2474, 3000, 2740, 2737, 2413, 2873, 3105, 3049, 2521, 3185, 2950, 2696, 2725, 3188, 3781, 2493, 2241, 2528, 2680, 3126, 3126, 2649, 2649, 2623, 2623, 2820, 2820, 2693, 2693, 2812, 2812, 2527, 2527, 3031, 3031, 2571, 2571, 3066, 3066, 2670, 2670, 2699, 2699, 3106, 2782, 2617}
  builds := make([]string, len(data))

  times := make([]int64, len(data))
  for i := range times {
    times[i] = int64(i)
  }
  degradations := detectDegradations(data, builds, times, AnalysisSettings{})
  assert.Equal(t, 0, len(degradations))
}

func TestWithDegradations(t *testing.T) {
  data := []int{100, 100, 100, 100, 100, 200, 200, 200}
  builds := make([]string, len(data))

  times := make([]int64, len(data))
  for i := range times {
    times[i] = int64(i)
  }
  degradations := detectDegradations(data, builds, times, AnalysisSettings{MinimumSegmentLength: 3})
  assert.Equal(t, 1, len(degradations))
  assert.Equal(t, int64(5), degradations[0].timestamp)
}

func TestWithoutDegradations3(t *testing.T) {
  data := []int{100, 100, 100, 100, 100, 200, 100, 100, 100}
  builds := make([]string, len(data))

  times := make([]int64, len(data))
  for i := range times {
    times[i] = int64(i)
  }
  degradations := detectDegradations(data, builds, times, AnalysisSettings{MinimumSegmentLength: 3})
  assert.Equal(t, 0, len(degradations))
}

func TestWithDegradations2(t *testing.T) {
  data := []int{100, 100, 100, 100, 100, 200, 300, 300, 300}
  builds := make([]string, len(data))

  times := make([]int64, len(data))
  for i := range times {
    times[i] = int64(i)
  }
  degradations := detectDegradations(data, builds, times, AnalysisSettings{MinimumSegmentLength: 3})
  assert.Equal(t, 1, len(degradations))
  assert.Equal(t, int64(5), degradations[0].timestamp)
}

func TestComplexDistributionFromUnitTestWithoutDegradation(t *testing.T) {
  data := []int{310, 332, 331, 324, 350, 346, 280, 362, 284, 350, 312, 379, 376, 368, 326, 308, 335, 293, 336, 376, 318, 286, 307, 311, 363, 273, 351, 361, 362, 368, 350, 379, 286, 290, 296, 287, 321, 287, 315, 297, 331, 277, 369, 344, 282, 283, 272, 387, 282, 271, 351, 311, 286, 315, 384, 283, 325, 288, 298, 370, 360, 320, 289, 389, 367, 355, 439, 295, 276, 345, 297, 359, 386, 319, 397, 351, 347, 346, 305, 387, 348, 295, 282, 360, 337, 399, 329, 305, 400, 317, 296, 287, 288, 351, 338, 309, 258, 273, 296, 273, 321, 321, 261, 274, 275, 255, 253, 330, 329, 275, 276, 304, 263, 278, 316, 302, 330, 351, 318, 307, 281, 287, 274, 381, 320, 347, 280, 291, 307, 353, 354, 284, 388, 352, 369, 410, 348, 266, 279, 256, 286, 287, 352, 341, 293, 282, 279, 362, 334, 344, 322, 402, 277, 289, 270, 273, 357, 356, 290, 317, 260, 272, 286, 332, 281, 337, 267, 276, 279, 299, 306, 325, 444, 388, 320, 292, 377, 306, 297, 371, 524, 301, 452, 324, 360, 296, 332, 378, 265, 355, 310, 301, 399, 328, 315, 462, 372, 378, 322, 326, 335, 272, 303, 328, 291, 273, 326, 299, 324, 307, 328, 267, 378, 328, 275, 324, 309, 304, 284, 301, 294, 291, 298, 330, 350, 348, 313, 313, 299, 340, 347, 289, 301, 339, 337, 375, 295, 311, 366, 341, 325, 422, 297, 348, 359, 271, 284, 276, 267, 275, 285, 254, 386, 317, 353, 264, 265, 286, 299, 294, 277, 347, 267, 342, 274, 318, 367, 273, 335, 269, 301, 361, 424, 340, 316, 280, 304, 311, 463, 312, 435, 362, 328, 321, 270, 330, 407, 277, 319, 426, 319, 366, 466, 370, 363, 352, 372, 264, 274, 287, 324, 333, 363, 267, 292, 294, 307, 321, 307, 295, 270, 332, 308, 271, 291, 276, 270, 331, 265, 278, 295, 320, 315, 290, 294, 364, 350, 343, 324, 341, 355, 374, 273, 376, 305, 304, 352, 351, 375, 321, 334, 320, 367, 367, 386, 265, 344, 281, 328, 350, 369, 299, 321, 371, 300, 342, 369, 312, 285, 348, 356, 291, 280, 285, 360, 283, 278, 286, 353, 359, 295, 446, 319, 394, 346, 352, 284, 269, 375, 281, 310, 383, 388, 343, 387, 283, 342, 293, 356, 301, 273, 348, 343, 398, 275, 346, 411, 383, 351, 264, 278, 284, 369, 281, 278, 303, 266, 299, 295, 348, 262, 261, 331, 277, 267, 380, 260, 266, 352, 279, 357, 295, 271, 352, 279, 318, 262, 272, 262, 343, 343, 369, 383, 284, 284, 251, 272, 354, 265, 265, 304, 296, 276, 345, 287, 297, 526, 275, 321, 273, 327, 302, 349, 293, 374, 290, 328, 329, 340, 334, 312, 319, 339, 358, 361, 294, 276, 274, 312, 305, 328, 334, 332, 288, 348, 278, 258, 402, 337, 279, 330, 329, 292, 312, 358, 269, 370, 368, 358, 400, 349, 463, 445, 361, 387, 358, 368, 331, 348, 346, 445, 367, 362, 400, 299, 283, 327, 284, 340, 321, 364, 348, 286, 308, 340, 301, 315, 336, 286, 283, 271, 300, 281, 318, 489, 352, 341, 316, 282, 379, 349, 263, 353, 328, 353, 287, 298, 344, 319, 290, 292, 321, 352, 279, 336, 372, 342, 327, 264, 389, 335, 280, 275, 266, 310, 274, 259, 313, 354, 257, 295, 341, 269, 328, 323, 291, 433, 413, 338, 330, 286, 337, 296, 342, 304, 396, 473, 269, 298, 321, 269, 388, 357, 283, 330, 324, 370, 310, 355, 343, 283, 322, 333, 259, 285, 343, 275, 296, 339, 349, 330, 371, 380, 321, 289, 304, 343, 344, 316, 321, 289, 337, 279, 340, 331, 435, 351, 323, 385, 442, 388, 273, 306, 265, 345, 284, 302, 288, 377, 346, 536, 282, 285, 352, 289, 291, 293, 279, 279, 315, 371, 273, 396, 361, 296, 261, 266, 323, 286, 270, 264, 305, 275, 263, 297, 325, 279, 327, 279, 286, 265, 322, 265, 265, 259, 278, 281, 332, 268, 280, 266, 290, 371, 323, 254, 261, 285, 306, 337, 297, 317, 269, 300, 285, 291, 291, 273, 340, 248, 380, 266, 272, 361, 350, 286, 288, 408, 352, 340, 368, 344, 340, 287, 287, 379, 286, 304, 353, 428, 299, 351, 325, 346, 292, 369, 328, 301, 311, 348, 297, 337}
  builds := make([]string, len(data))

  times := make([]int64, len(data))
  for i := range times {
    times[i] = int64(i)
  }

  degradations := detectDegradations(data, builds, times, AnalysisSettings{MinimumSegmentLength: 30, MedianDifferenceThreshold: 20})
  assert.Equal(t, 0, len(degradations), "degradations: %v", degradations)
}

func TestComplexDistributionFromUnitTestWithDegradation(t *testing.T) {
  data := []int{101, 87, 88, 88, 90, 91, 97, 90, 101, 90, 89, 88, 97, 88, 92, 97, 86, 90, 93, 86, 143, 99, 93, 86, 87, 98, 87, 100, 100, 86, 99, 93, 95, 90, 88, 88, 98, 87, 89, 98, 88, 91, 88, 87, 101, 84, 97, 98, 95, 95, 92, 95, 91, 86, 95, 86, 96, 86, 86, 99, 98, 90, 101, 87, 100, 97, 88, 86, 95, 92, 98, 106, 97, 92, 94, 102, 86, 101, 86, 96, 101, 99, 86, 98, 98, 87, 102, 90, 108, 88, 97, 95, 94, 89, 87, 88, 86, 97, 94, 96, 97, 86, 101, 86, 90, 87, 87, 87, 88, 98, 94, 96, 95, 88, 102, 104, 102, 102, 87, 86, 87, 87, 100, 88, 96, 85, 88, 95, 86, 98, 98, 98, 98, 86, 92, 85, 96, 84, 93, 85, 87, 93, 86, 97, 88, 88, 88, 92, 97, 86, 93, 92, 90, 85, 100, 98, 98, 88, 94, 98, 93, 98, 88, 86, 100, 86, 102, 96, 92, 94, 92, 92, 118, 91, 89, 95, 102, 90, 97, 88, 95, 91, 87, 102, 98, 86, 87, 87, 104, 101, 97, 88, 99, 91, 85, 99, 93, 99, 100, 104, 101, 99, 100, 97, 87, 96, 82, 92, 87, 86, 97, 96, 86, 85, 89, 88, 89, 86, 92, 99, 92, 95, 94, 108, 89, 91, 94, 86, 91, 87, 86, 97, 87, 87, 87, 99, 89, 95, 97, 89, 88, 99, 86, 100, 100, 96, 86, 98, 87, 99, 101, 95, 85, 98, 85, 95, 86, 87, 89, 84, 86, 98, 88, 95, 98, 96, 99, 95, 93, 100, 97, 97, 88, 80, 87, 88, 88, 111, 92, 88, 88, 99, 97, 86, 85, 96, 95, 98, 90, 112, 87, 99, 99, 105, 92, 98, 92, 89, 97, 89, 96, 86, 96, 102, 91, 90, 86, 86, 97, 97, 96, 87, 86, 89, 106, 101, 91, 86, 90, 87, 85, 86, 101, 88, 98, 87, 88, 97, 97, 86, 88, 96, 96, 85, 101, 88, 95, 93, 92, 90, 88, 96, 84, 102, 87, 87, 108, 97, 107, 88, 89, 100, 93, 93, 95, 92, 101, 96, 98, 99, 97, 86, 98, 97, 96, 87, 98, 96, 97, 87, 97, 87, 94, 86, 87, 98, 86, 89, 94, 97, 99, 87, 97, 95, 96, 98, 101, 90, 96, 97, 97, 95, 97, 89, 83, 85, 93, 87, 86, 88, 102, 92, 84, 88, 86, 87, 96, 101, 96, 95, 96, 86, 92, 89, 89, 86, 96, 100, 87, 87, 97, 94, 103, 88, 84, 86, 95, 96, 85, 89, 91, 98, 85, 89, 97, 97, 84, 97, 91, 80, 88, 87, 96, 95, 93, 86, 150, 95, 86, 98, 98, 88, 101, 86, 99, 96, 87, 94, 90, 98, 85, 98, 95, 90, 97, 95, 96, 88, 103, 99, 95, 84, 86, 86, 99, 86, 98, 88, 91, 100, 96, 95, 92, 100, 99, 97, 85, 89, 96, 85, 97, 93, 98, 86, 84, 85, 87, 104, 102, 97, 97, 87, 96, 96, 96, 86, 86, 86, 85, 85, 89, 87, 97, 97, 86, 88, 92, 103, 88, 87, 83, 95, 101, 89, 92, 94, 86, 88, 90, 170, 98, 107, 85, 97, 90, 142, 95, 93, 99, 95, 83, 94, 97, 95, 97, 83, 89, 94, 98, 96, 96, 96, 98, 91, 95, 92, 91, 97, 100, 88, 99, 97, 97, 96, 98, 89, 95, 97, 98, 96, 96, 89, 97, 94, 80, 82, 89, 90, 92, 89, 86, 95, 96, 88, 97, 171, 85, 146, 98, 94, 94, 95, 86, 90, 87, 95, 96, 81, 89, 87, 87, 86, 86, 88, 93, 87, 86, 88, 87, 86, 89, 100, 98, 85, 88, 96, 89, 88, 103, 92, 87, 88, 90, 102, 99, 88, 87, 95, 98, 86, 86, 90, 86, 168, 86, 159, 99, 97, 103, 85, 91, 86, 87, 85, 95, 84, 105, 93, 88, 86, 94, 87, 85, 87, 85, 84, 97, 99, 86, 83, 91, 94, 92, 94, 98, 87, 96, 133, 122, 123, 124, 133, 136, 127, 132, 122, 135, 120, 125, 119, 129, 119, 124, 130, 121, 121, 136, 124, 133, 119, 130, 134, 130, 120, 120, 132, 124, 131, 138, 133, 132, 133, 139, 134, 131, 127, 131, 138, 135, 131, 123, 117, 121, 128, 124, 116, 122, 122, 121, 129, 141, 131, 136, 119, 118, 141, 130, 130, 131, 112, 121, 131, 122, 121, 119, 122, 133, 125, 118, 120, 139, 123, 117, 119, 131, 124, 119, 131, 121, 130, 122, 137, 122, 125, 120, 122, 121}
  builds := make([]string, len(data))

  times := make([]int64, len(data))
  for i := range times {
    times[i] = int64(i)
  }
  degradations := detectDegradations(data, builds, times, AnalysisSettings{MinimumSegmentLength: 30, MedianDifferenceThreshold: 20})
  assert.Equal(t, 1, len(degradations), "degradations: %v", degradations)
  assert.Equal(t, int64(667), degradations[0].timestamp)
}
