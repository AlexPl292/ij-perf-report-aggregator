// Package analyzer Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// pkg/analyzer/sql/create-db.sql
// pkg/analyzer/sql/insert-report.sql
package analyzer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _createDbSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\x3f\x0f\xd3\x30\x10\xc5\x77\x7f\x8a\x1b\x13\xa9\x03\xb4\x03\x43\xc5\xc6\xc2\x84\xc4\xc2\x18\xb9\xce\x35\x3d\xb0\xcf\xd1\xe5\x02\xf4\xdb\xa3\xfc\x6d\xe3\x34\x29\x5d\xaa\xea\xde\xef\xf5\xfe\x3c\x5f\xb0\x22\x3e\x1b\xe3\x04\xad\x22\xa8\xbd\x78\x84\x60\xdd\x8d\x18\x4d\x66\x00\xd8\x06\x04\x2a\xa1\x51\x21\xae\x80\xa3\x02\xb7\xde\x43\x2d\x14\xac\xdc\xe1\x17\xde\x4d\x9e\x1a\x08\xd6\x51\xb4\xe7\xa9\x84\x17\x9f\x1d\xb7\x83\x81\xa9\x81\x04\x22\xd6\xee\x6b\x82\x0e\xc6\x00\x54\xc8\x28\x56\xb1\x2c\x94\x02\x6e\x2a\x01\x2e\x2d\xf9\xa5\x68\x12\x96\x78\xb5\xad\x57\xf8\xb0\x74\x56\x57\x0c\xcc\x62\x82\x2d\xa0\xd7\x13\x37\x6a\xbd\x47\x79\x90\xbb\xfa\x41\x55\x4b\xac\x51\x94\xb0\x99\x17\xd3\x37\x50\x4b\x2c\x5b\xa7\xfb\x9b\x7b\x8c\xe6\x3e\xbe\xd9\xd6\x2c\x3c\xfe\xaf\xf0\xf4\x7e\xff\x62\xff\x14\xc3\xb5\x77\x9b\x34\x00\xd7\x28\x48\x15\x77\x27\x86\x6c\x3c\x70\x0e\x82\x57\x14\x64\x87\xcd\x7c\xf4\xec\xfb\xb7\x1f\x5f\xbf\xe4\x10\x19\x4a\xf4\xa8\x5d\x9c\x3a\x43\xa7\x87\xd4\xe6\xe5\xce\x17\xa6\x73\x19\xb2\xae\xb2\xf6\x7c\x0e\x2f\x71\x89\x7f\xd3\x48\x45\x1e\xe3\x0c\xd9\xb2\x92\x9f\x97\xdc\xd8\x7f\x31\xfc\x7a\xc2\xa6\x61\x13\xfd\x78\xdf\xb5\x7e\x2c\xa4\xfa\x61\xbe\x60\x7f\x46\x59\x33\x53\x06\x36\x20\xe2\x1d\xe8\xf8\x1a\xaa\xad\xba\xdb\x26\x74\x5a\x3d\xfa\x79\xd5\x8b\x77\x9f\x84\x26\x7d\xe9\xee\x66\xb9\xc2\x26\x4d\x4c\x7f\x95\x5a\x6c\x15\x2c\xb4\x0d\x4a\xf1\x1b\xa5\xa1\xc8\x9f\x3f\x75\xff\x1a\x43\x20\x3d\xff\x0b\x00\x00\xff\xff\x3a\x41\x24\x7e\xbb\x04\x00\x00")

func createDbSqlBytes() ([]byte, error) {
	return bindataRead(
		_createDbSql,
		"create-db.sql",
	)
}

func createDbSql() (*asset, error) {
	bytes, err := createDbSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "create-db.sql", size: 1211, mode: os.FileMode(420), modTime: time.Unix(1571731152, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _insertReportSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x4f\xcd\xca\xc2\x40\x0c\xbc\xf7\x29\x72\x6c\x61\x2f\xdf\xe7\x03\x48\x91\x1e\x84\xa2\xe2\xdf\x75\x59\xd3\xa0\x81\xb6\xbb\xa4\x29\xbe\xbe\xe8\x6a\x41\xd8\x1a\x72\x98\x19\x66\x32\x64\x5f\xed\xea\x72\x55\xc1\x7a\x73\xdc\x82\x50\xf0\xa2\x90\x73\x63\xa0\x73\x78\xe3\x9e\x0c\x04\xf1\xcd\x88\x6a\x32\x48\xcd\x95\x7a\x12\xa7\xd4\x58\xe5\x8e\x0c\x5c\x46\x6e\xdf\x38\x1d\x50\xb4\xd1\xf3\x2c\x51\xb4\xdc\x0f\xea\xda\x96\xe4\x5b\x8e\x24\x88\x0f\x24\xca\x34\xcc\x5c\x8b\x36\xfc\xfb\x14\xe3\xff\x84\x16\x33\x11\x71\x77\x1b\x1f\x2d\xb2\x73\x59\x9f\xaa\x03\xe4\x4b\x03\xaf\x9d\x12\x09\xf6\x5b\x28\x1e\x01\x00\x00\xff\xff\x64\x68\x67\x51\x49\x01\x00\x00")

func insertReportSqlBytes() ([]byte, error) {
	return bindataRead(
		_insertReportSql,
		"insert-report.sql",
	)
}

func insertReportSql() (*asset, error) {
	bytes, err := insertReportSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "insert-report.sql", size: 329, mode: os.FileMode(420), modTime: time.Unix(1571472091, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"create-db.sql":     createDbSql,
	"insert-report.sql": insertReportSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"create-db.sql":     &bintree{createDbSql, map[string]*bintree{}},
	"insert-report.sql": &bintree{insertReportSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
