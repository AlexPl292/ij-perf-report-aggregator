// Package analyzer Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// pkg/analyzer/sql/create-db.sql
// pkg/analyzer/sql/insert-report.sql
package analyzer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _createDbSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x31\x6f\xf2\x40\x0c\x86\xf7\xfb\x15\x1e\x41\x62\xf9\xe0\xdb\x50\xb7\x2e\x9d\x2a\x75\xe9\x78\x32\x77\x26\xb8\xcd\xf9\x22\xc7\x69\xcb\xbf\xaf\xae\x49\xa0\x40\x82\x9a\x25\x8a\xf2\x3c\x3e\xfb\x5e\xef\xa8\x62\xd9\x3a\x17\x94\xd0\x08\x0c\x77\x35\x41\xc2\x70\x60\x21\xb7\x70\x00\x82\x89\x80\x23\xb4\xa6\x2c\x15\x48\x36\x90\xae\xae\xa1\x51\x4e\xa8\x47\x78\xa7\xa3\x5b\x5e\x17\x50\x6a\xb2\xda\x8f\xcf\x11\x2e\x9f\x3b\x85\x56\x0e\xc6\xb3\xcf\x3c\x8b\x95\xd7\xc8\x17\xa6\x22\x21\x45\xa3\xe8\x8d\x13\x4d\x33\x16\xfc\xae\xe3\x3a\xfa\xb1\x01\x16\x5b\x39\x07\xd0\x68\x8e\x5d\xb0\xd9\x86\x8a\xdc\x9b\xe1\xdf\xbd\x26\x06\x66\xfd\x07\x66\x33\xcf\x94\x89\xc9\x94\x43\xeb\x3f\x48\x5b\xce\x32\x59\x28\x76\x8a\xc6\x59\xfc\x00\x4f\x35\xcd\xd2\x1a\x8a\x9d\x90\x5b\xc6\x01\x28\x7e\xfa\x3e\x9d\xb9\xe9\x1d\xc0\x3e\x2b\x71\x25\x25\x12\x58\x0c\x81\x2c\x41\x69\x4f\x4a\x12\xa8\x3d\x85\xb4\x78\x79\x7e\x7d\x7a\x5c\x42\x16\x88\x54\x93\x95\xe4\x4b\xc1\x60\xbf\x77\x82\x25\xd2\xd7\xe8\xf8\xfe\x2b\xcb\xb0\x24\xe7\x03\xb6\x97\xfc\x90\xd3\x2d\x3f\xfc\xb8\xe6\xfb\xbb\x4e\xf8\x96\xf5\xd6\x19\x03\x9d\x91\x58\xee\x48\xeb\x69\xa9\x41\x0b\x87\x59\x69\x53\xe6\x6f\x14\xab\x84\xd0\xb5\xa4\x63\xba\x0f\xff\xcb\xbd\xe4\x94\xd8\xb6\xdf\x01\x00\x00\xff\xff\x82\xb4\xb4\xbf\x7c\x03\x00\x00")

func createDbSqlBytes() ([]byte, error) {
	return bindataRead(
		_createDbSql,
		"create-db.sql",
	)
}

func createDbSql() (*asset, error) {
	bytes, err := createDbSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "create-db.sql", size: 892, mode: os.FileMode(420), modTime: time.Unix(1570091983, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _insertReportSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\xcf\xca\xc2\x40\x0c\xc4\xef\x7d\x8a\x1c\x5b\xc8\xe5\xfb\x7c\x00\x29\xd2\x83\x50\x54\xfc\x77\x5d\xd6\xdd\xa0\x01\x9b\x2d\x69\xaa\xaf\x2f\x58\xed\xa9\x35\xe4\x30\x99\xe1\x17\x98\x7d\xb5\xab\xcb\x55\x05\xeb\xcd\x71\x0b\x4a\x6d\x52\x83\x9c\x23\x42\xe3\xc3\x8d\x85\x10\x5a\x4d\xb1\x0f\x86\x19\x4c\xcd\x95\x84\xd4\x1b\x45\x67\xdc\x10\x82\x05\x77\xe9\xf9\x1e\x1d\xc7\x19\x62\x88\xc3\x1f\x7e\xd5\xff\xa8\x16\x33\x48\x43\xa6\x1c\x3a\xf7\x20\xed\x38\x09\x42\xec\xd5\x1b\x27\x71\x9f\x04\x81\xa5\x33\x2f\x36\x1a\xd3\x8f\xd4\x3f\xdd\x50\xb2\xc8\xce\x65\x7d\xaa\x0e\x90\x2f\x11\xde\x3b\x12\x13\xd7\x6f\xa3\x78\x05\x00\x00\xff\xff\x27\x14\xd6\xf3\x45\x01\x00\x00")

func insertReportSqlBytes() ([]byte, error) {
	return bindataRead(
		_insertReportSql,
		"insert-report.sql",
	)
}

func insertReportSql() (*asset, error) {
	bytes, err := insertReportSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "insert-report.sql", size: 325, mode: os.FileMode(420), modTime: time.Unix(1570092302, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"create-db.sql":     createDbSql,
	"insert-report.sql": insertReportSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"create-db.sql":     &bintree{createDbSql, map[string]*bintree{}},
	"insert-report.sql": &bintree{insertReportSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
