// Package analyzer Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// pkg/analyzer/sql/create-db.sql
// pkg/analyzer/sql/insert-report.sql
package analyzer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _createDbSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x31\x6f\xea\x30\x10\xc7\x77\x7f\x8a\x1b\x13\x89\xe1\x3d\x90\xde\x82\xde\xd6\xa5\x53\xa5\x2e\x1d\x23\xe3\x1c\xe1\x5a\xfb\x6c\x5d\x2e\x6d\xf9\xf6\x55\x48\x02\x24\x90\x50\x16\x84\xfc\xfb\x1d\xe7\xff\xdf\x3b\xac\x88\xb7\xc6\x38\x41\xab\x08\x6a\x77\x1e\x21\x58\x77\x20\x46\x93\x19\x00\xb6\x01\x81\x4a\xa8\x55\x88\x2b\xe0\xa8\xc0\x8d\xf7\x90\x84\x82\x95\x23\x7c\xe0\xd1\xe4\xd3\x01\x82\x29\x8a\x9e\x7c\x2a\xe1\xce\x67\x61\xda\xca\xc0\xb0\xc0\x44\x22\xd6\xf6\x6b\x90\x56\xc6\x00\x54\xc8\x28\x56\xb1\x2c\x94\x02\xce\x92\x00\xbb\x86\xfc\x18\x1a\xc0\x12\xf7\xb6\xf1\x0a\x7f\xc6\x93\xd5\x15\x9d\x33\xba\xc1\x9c\x70\xe2\x89\x6b\xb5\xde\xa3\x5c\xcc\x45\xbe\xa3\x92\xc4\x84\xa2\x84\xf5\x39\x98\xd3\x02\x49\x62\xd9\x38\x5d\x4e\xee\x72\x35\xf7\xf7\x41\x5a\x67\x70\xfd\x5b\x70\xf3\x38\x7f\xb1\x5f\x45\xd7\xf6\xe2\x92\x06\x60\x1f\x05\xa9\xe2\xb6\x62\xc8\xfa\x82\x73\x10\xdc\xa3\x20\x3b\xac\xcf\xa5\x67\xaf\x2f\x6f\xcf\x4f\x39\x44\x86\x12\x3d\x6a\xfb\x9c\xda\x81\x4e\xaf\x1f\x1a\x71\x89\xdf\xd3\xfa\x23\xf7\x4f\x0f\xb2\xf1\x49\xbe\x1d\x7b\xfd\x7f\x15\xdd\xaf\x2b\x6d\x58\x6c\xc2\xf7\x5d\xdc\xf2\xfd\xc1\x94\xef\x02\x0c\xf6\x3d\xca\xad\x33\xf4\x35\x23\x11\x2f\x48\xeb\xfb\x52\xb2\xea\x0e\xb3\xd2\xa6\xcd\x2d\x89\xad\x82\x85\xa6\x46\x29\x3e\x51\x6a\x8a\xfc\xff\x5f\x9b\x67\x0c\x81\x74\xfb\x13\x00\x00\xff\xff\x38\x75\xf5\xad\x09\x04\x00\x00")

func createDbSqlBytes() ([]byte, error) {
	return bindataRead(
		_createDbSql,
		"create-db.sql",
	)
}

func createDbSql() (*asset, error) {
	bytes, err := createDbSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "create-db.sql", size: 1033, mode: os.FileMode(420), modTime: time.Unix(1571594662, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _insertReportSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x4f\xcd\xca\xc2\x40\x0c\xbc\xf7\x29\x72\x6c\x61\x2f\xdf\xe7\x03\x48\x91\x1e\x84\xa2\xe2\xdf\x75\x59\xd3\xa0\x81\xb6\xbb\xa4\x29\xbe\xbe\xe8\x6a\x41\xd8\x1a\x72\x98\x19\x66\x32\x64\x5f\xed\xea\x72\x55\xc1\x7a\x73\xdc\x82\x50\xf0\xa2\x90\x73\x63\xa0\x73\x78\xe3\x9e\x0c\x04\xf1\xcd\x88\x6a\x32\x48\xcd\x95\x7a\x12\xa7\xd4\x58\xe5\x8e\x0c\x5c\x46\x6e\xdf\x38\x1d\x50\xb4\xd1\xf3\x2c\x51\xb4\xdc\x0f\xea\xda\x96\xe4\x5b\x8e\x24\x88\x0f\x24\xca\x34\xcc\x5c\x8b\x36\xfc\xfb\x14\xe3\xff\x84\x16\x33\x11\x71\x77\x1b\x1f\x2d\xb2\x73\x59\x9f\xaa\x03\xe4\x4b\x03\xaf\x9d\x12\x09\xf6\x5b\x28\x1e\x01\x00\x00\xff\xff\x64\x68\x67\x51\x49\x01\x00\x00")

func insertReportSqlBytes() ([]byte, error) {
	return bindataRead(
		_insertReportSql,
		"insert-report.sql",
	)
}

func insertReportSql() (*asset, error) {
	bytes, err := insertReportSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "insert-report.sql", size: 329, mode: os.FileMode(420), modTime: time.Unix(1571472091, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"create-db.sql":     createDbSql,
	"insert-report.sql": insertReportSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"create-db.sql":     &bintree{createDbSql, map[string]*bintree{}},
	"insert-report.sql": &bintree{insertReportSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
