// Package analyzer Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// pkg/analyzer/sql/create-db.sql
// pkg/analyzer/sql/insert-report.sql
package analyzer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _createDbSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xb1\x4e\xc3\x30\x10\x86\x77\x3f\xc5\x8d\x89\xd4\x85\x56\x62\xa9\xd8\x58\x98\x90\x58\x18\x2d\xd7\xbe\xa6\x07\xf1\x39\xba\x5c\x80\xbe\x3d\x32\x71\xa0\x4d\x9b\x8a\x2c\x91\xe5\xef\x3b\xff\xfa\x6f\x87\x0d\xf1\xd6\x18\x2f\xe8\x14\x41\xdd\xae\x45\x88\xce\x1f\x88\xd1\x54\x06\x80\x5d\x44\xa0\x00\xbd\x0a\x71\x03\x9c\x14\x78\x68\x5b\xe8\x84\xa2\x93\x23\xbc\xe3\xd1\xd4\xf3\x01\x82\x5d\x12\xfd\xf1\x29\xc0\xf9\x77\x63\xd0\xca\xc0\xf4\xf6\x1f\x4f\xac\xf9\x37\xf1\x99\x69\x90\x51\x9c\x62\xb0\x4a\x11\xaf\x33\xea\xed\x6e\xa0\x36\xd8\x29\x00\xb1\xae\x8c\x01\xe8\x24\x85\xc1\xeb\x62\xa0\x2c\x8f\xa6\xbf\xbb\x15\xa2\x30\xeb\x7f\x30\x9b\x65\xc6\x00\x88\xfb\xb4\x63\x61\x4b\x81\x0c\xc0\x3e\x09\x52\xc3\xb9\x25\xa8\x4a\x47\x35\x08\xee\x51\x90\x3d\xf6\xbf\xbd\x55\x2f\xcf\xaf\x4f\x8f\x35\x24\x86\x80\x2d\x6a\x5e\x46\x1e\xe8\xf5\x74\x4d\xc4\x01\xbf\xe6\x3d\x26\x2e\x8b\x83\xea\xfc\xa6\xde\x9e\x7b\xe5\x2d\x3b\x9e\x4e\xb4\x29\xd8\x8c\x2f\x95\x5f\xf2\xe5\x62\xce\x8f\xb5\x45\xf7\x96\xe4\xd2\x99\x76\xb3\x20\x11\xdf\x90\xd6\xd7\xa5\xce\xa9\x3f\x2c\x4a\x9b\xdc\x5b\x27\xae\x89\x0e\x86\x1e\xc5\x7e\xa0\xf4\x94\xf8\xe1\x3e\xf7\x99\x62\x24\xdd\x7e\x07\x00\x00\xff\xff\xf4\x91\x31\x0d\x47\x03\x00\x00")

func createDbSqlBytes() ([]byte, error) {
	return bindataRead(
		_createDbSql,
		"create-db.sql",
	)
}

func createDbSql() (*asset, error) {
	bytes, err := createDbSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "create-db.sql", size: 839, mode: os.FileMode(420), modTime: time.Unix(1571290773, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _insertReportSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x0a\x72\x0d\xf0\x71\x74\x76\x55\xf0\xf4\x0b\xf1\x57\x28\x4a\x2d\xc8\x2f\x2a\x51\xd0\xc8\x4c\xd1\x51\xc8\x4d\x4c\xce\xc8\xcc\x4b\xd5\x51\x28\x28\xca\x4f\x29\x4d\x2e\xd1\xe1\x52\xc0\x06\xd2\x53\xf3\x52\x8b\x12\x4b\x52\x53\xe2\x4b\x32\x73\x53\x75\x14\x4a\x92\xe3\x93\x4a\x33\x73\x52\xe2\x33\x53\x70\xe8\x80\x48\x27\x1b\xea\xc0\x58\x46\x70\x96\x31\x0e\x2d\x45\x89\xe5\xf1\x10\xb7\x69\x72\x85\x39\xfa\x84\xba\x06\x2b\x68\xd8\xeb\x28\x80\x11\x5c\x07\x16\x1e\x8a\x80\x26\x20\x00\x00\xff\xff\xe8\x6d\xbd\x12\xeb\x00\x00\x00")

func insertReportSqlBytes() ([]byte, error) {
	return bindataRead(
		_insertReportSql,
		"insert-report.sql",
	)
}

func insertReportSql() (*asset, error) {
	bytes, err := insertReportSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "insert-report.sql", size: 235, mode: os.FileMode(420), modTime: time.Unix(1571290571, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"create-db.sql":     createDbSql,
	"insert-report.sql": insertReportSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"create-db.sql":     &bintree{createDbSql, map[string]*bintree{}},
	"insert-report.sql": &bintree{insertReportSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
