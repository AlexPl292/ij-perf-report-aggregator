{% import "github.com/bvinc/go-sqlite-lite/sqlite3" %}
{% import "github.com/develar/errors" %}

{% stripspace %}
{% func httpError(error *HttpError) %}
{
  "error": {%q= error.Message %}
}
{% endfunc %}

{% func GroupedMetricList(list []MedianResult) %}
{
  "groupNames": [
    {% if len(list) > 0 %}
      {% for i, value := range list[0].buildToValue %}
        {% if i != 0 %},{% endif %}
        "{%d value.buildC1 %}"
      {% endfor %}
    {% endif %}
  ],
  "data": [
    {% for i, item := range list %}
      {% if i != 0 %},{% endif %}
      {
        {% for _, value := range item.buildToValue %}
        "{%d value.buildC1 %}": {%d value.value %},
        {% endfor %}
        {% comment %}
          metric as last to avoid using any logic "should we print last comma or not"
        {% endcomment %}
        "metric": {%q= item.metricName %}
      }
    {% endfor %}
  ]
}
{% endfunc %}

{% func Info(productNames []string, essentialMetricNames []string, instantMetricNames []string, statement *sqlite3.Stmt, errRef *error) %}
{
  "productNames": {%= safeStringList(productNames) %},
  "durationMetricNames": [
    {% for _, name := range essentialMetricNames %}
      "{%s= name %}",
    {% endfor %}
    "moduleLoading"
  ],
  "instantMetricNames": [
    {% for i, name := range instantMetricNames %}
      {% if i != 0 %},{% endif %}
      "{%s= name %}"
    {% endfor %}
  ],
  "productToMachine": {
    {% for i, product := range productNames %}
      {% if i != 0 %}
      ,
        {% code statement.Reset() %}
      {% endif %}

      {% code
        *errRef = errors.WithStack(statement.BindString(product, 0))
        if *errRef != nil {
          return
        }
      %}

      "{%s= product %}": {%= writeMachineInfoList(statement, errRef) %}
    {% endfor %}
  }
}
{% endfunc %}

{% func safeStringList(list []string) %}
[
  {% for i, v := range list %}
    {% if i != 0 %},{% endif %}
    "{%s= v %}"
  {% endfor %}
]
{% endfunc %}

{% func writeMachineInfoList(statement *sqlite3.Stmt, errRef *error) %}
[
  {% code isFirstRow := true %}
  {% for %}
    {% code
      hasRow, err := statement.Step()
      if err != nil {
        *errRef = errors.WithStack(err)
        return
      }

      if !hasRow {
        break
      }

      id, _, err := statement.ColumnInt(0)
      if err != nil {
        *errRef = errors.WithStack(err)
        return
      }

      name, _, err := statement.ColumnRawString(1)
      if err != nil {
        *errRef = errors.WithStack(err)
        return
      }
    %}

    {% if isFirstRow %}
      {% code isFirstRow = false %}
    {% else %}
      ,
    {% endif %}
    {
      "id": {%d id %},
      "name": {%q= string(name) %}
    }
  {% endfor %}
]
{% endfunc %}
{% endstripspace %}